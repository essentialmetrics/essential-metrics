#!/usr/bin/env python
# EM-11 - gather vulnerability patching from event logs

'''
44      Installation download started 
43      Installation Started
19      Installation successful

We are specifically parsing out the: "Update for (Windows|Microsoft)" events.
There are many other applications captured by these system events however we are limiting to this subset as the most important/ impactful
'''

import pandas as pd
import utils.common_functions as cf
import sys
from utils.logger_config  import configure_logger

logger = configure_logger(__name__)

from utils.database_class import DatabaseManager

logger.info('Collecting the vulnerability patching data')

result = None

with DatabaseManager() as db:
    logger.info("Getting the latest event timestamp from the database if it exists")
    db.execute_query("SELECT MAX(TimeGenerated) FROM em_11_vulnerability_patching;")
    result = db.cursor.fetchone()[0]

if result is not None:
    logger.info(f'Using {result} timestamp that we got from the database as the latest timestamp for our events collected')
    query = f"SELECT * FROM Win32_NTLogEvent WHERE Logfile='System' AND (EventCode=19 OR EventCode=43 OR EventCode=44) AND SourceName = 'Microsoft-Windows-WindowsUpdateClient' AND TimeGenerated >= '{result}'"
else:
    logger.info("No timestamp found in the database, getting all events")
    query = "SELECT * FROM Win32_NTLogEvent WHERE Logfile='System' AND (EventCode=19 OR EventCode=43 OR EventCode=44) AND SourceName = 'Microsoft-Windows-WindowsUpdateClient'"

logger.info(f'Gathering vulnerability patching timelines from event IDs')
wql_r = cf.run_wmi_query(query)

login_events = []

try:
    for event in wql_r:
        if 'Update for' in getattr(event, "InsertionStrings")[0]:
            if getattr(event, "EventIdentifier") == 19:
                EventIdentifier='Installed'
            elif getattr(event, "EventIdentifier") == 43:
                EventIdentifier='Install Started'
            elif getattr(event, "EventIdentifier") == 44:
                EventIdentifier='Download started'
            Software = getattr(event, "InsertionStrings")[0]
            UpdateGUID = getattr(event, "InsertionStrings")[1]
            #EventIdentifier = getattr(event, "EventIdentifier")
            RecordNumber = getattr(event, "RecordNumber")
            TimeGenerated = getattr(event, "TimeGenerated")
            login_events.append([UpdateGUID, Software, EventIdentifier, TimeGenerated])
except Exception as e:
    logger.error(f'Failed to parse the WMI patching data: {e}')
    sys.exit(1)

df = pd.DataFrame(login_events, columns=['UpdateGUID', 'Software', 'EventIdentifier', 'TimeGenerated'])

with DatabaseManager() as db:
    db.add_new_rows('em_11_vulnerability_patching', df, ['UpdateGUID', 'Software', 'EventIdentifier', 'TimeGenerated'])

logger.info('Collection of the vulnerability patching data complete')